{"version":3,"file":"browser.es2015.esm.js","sources":["../src/common/State.js","../src/common/ApolloClient.js","../src/common/ReduxRouter.js","../src/client/loadImport.js","../src/server/loadImport.js","../src/common/Intl.js","../src/common/wrapApplication.js","../src/common/deepFetch.js","../src/common/routed.js","../src/client/getBrowserLocale.js","../src/common/createKernel.js","../src/common/fetchData.js","../src/client/renderApp.js","../src/client/updateState.js","../src/client.js"],"sourcesContent":["import { createStore, combineReducers, applyMiddleware, compose } from \"redux\"\nimport thunk from \"redux-thunk\"\n\nconst composeEnhancers = (process.env.TARGET === \"web\" &&\n  process.env.NODE_ENV === \"development\" &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose\n\n/**\n * Placeholder for a non active reducer in Redux.\n *\n * @param previousState {Object} Previous state.\n * @param action {string} Action which is being dispatched.\n */\nexport function emptyReducer(previousState = {}, action) {\n  return previousState\n}\n\n\n/**\n * Placeholder for a non active middleware in Redux.\n *\n * @param store {Object} Store object to work with.\n */\nexport function emptyMiddleware(store) {\n  return (next) => {\n    return (action) => {\n      return next(action)\n    }\n  }\n}\n\n\n/**\n * Placeholder for a non active enhancer in Redux.\n */\nexport function emptyEnhancer(param) {\n  return param\n}\n\n\n/**\n * Dummy reducer for exporting Edge Platform specific server-side data\n * to the client-side application.\n */\nexport function edgeReducer(previousState = {}, action) {\n  return previousState\n}\n\n\n\n\n/**\n * Selector for quering the nonce which must be used for injecting script tags.\n */\nexport function getNonce(state) {\n  return state.edge.nonce\n}\n\n\n/**\n * Bundles the given reducers into a root reducer for the application\n */\nexport function createRootReducer(reducers, router = null, apollo = null) {\n  const allReducers = {\n    // Application specific reducers\n    ...reducers,\n\n    // Edge Platform Data\n    edge: edgeReducer\n  }\n\n  // Integration point for Redux First Router\n  if (router) {\n    allReducers.location = router.reducer\n  }\n\n  // Support for Apollo-based GraphQL backends\n  if (apollo) {\n    allReducers.apollo = apollo.reducer()\n  }\n\n  return combineReducers(allReducers)\n}\n\n\n/**\n *\n *\n */\nexport function createReduxStore(config = {}) {\n  const {\n    reducers = {},\n    middlewares = [],\n    enhancers = [],\n    state = {},\n    router = null,\n    apollo = null\n  } = config\n\n  const rootReducer = createRootReducer(reducers, router, apollo)\n\n  const rootEnhancers = composeEnhancers(\n    applyMiddleware(\n      apollo ? apollo.middleware() : emptyMiddleware,\n\n      // Redux middleware that spits an error on you when you try to mutate\n      // your state either inside a dispatch or between dispatches.\n      // https://github.com/leoasis/redux-immutable-state-invariant\n      process.env.NODE_ENV === \"development\" ?\n        require(\"redux-immutable-state-invariant\").default() : emptyMiddleware,\n\n      // Basic Promise based async handling\n      thunk,\n\n      // Redux Router First Middleware\n      router ? router.middleware : emptyMiddleware,\n\n      // Application specific middlewares\n      ...middlewares,\n\n      // Add automatic state change logging for client application\n      // Note: Logger must be the last middleware in chain, otherwise it will log thunk and\n      // promise, not actual actions (https://github.com/evgenyrodionov/redux-logger/issues/20).\n      process.env.TARGET === \"web\" ?\n        require(\"redux-logger\").createLogger({ collapsed: true }) : emptyMiddleware\n    ),\n\n    // Redux First Router Enhancer\n    router ? router.enhancer : emptyEnhancer,\n\n    // Application specific enhancers\n    ...enhancers\n  )\n\n  const store = createStore(\n    rootReducer,\n    state,\n    rootEnhancers\n  )\n\n  return store\n}\n","import { ApolloClient, createNetworkInterface, createBatchingNetworkInterface } from \"react-apollo\"\n\nexport function createApolloClient(config = {}) {\n  const {\n    headers,\n    uri = null,\n    batchRequests = false,\n    trustNetwork = true,\n    queryDeduplication = true\n  } = config\n\n  const hasApollo = uri != null\n  const ssrMode = process.env.TARGET === \"node\"\n  var client\n\n  if (hasApollo) {\n    var opts = {\n      credentials: trustNetwork ? \"include\" : \"same-origin\",\n\n      // transfer request headers to networkInterface so that they're accessible to proxy server\n      // Addresses this issue: https://github.com/matthew-andrews/isomorphic-fetch/issues/83\n      headers\n    }\n\n    var networkInterface\n\n    if (batchRequests) {\n      networkInterface = createBatchingNetworkInterface({\n        uri,\n        batchInterval: 10,\n        opts\n      })\n    } else {\n      networkInterface = createNetworkInterface({\n        uri,\n        opts\n      })\n    }\n\n    client = new ApolloClient({\n      ssrMode,\n      queryDeduplication,\n      networkInterface\n    })\n  } else {\n    client = new ApolloClient({\n      ssrMode,\n      queryDeduplication\n    })\n  }\n\n  return client\n}\n","import { connectRoutes } from \"redux-first-router\"\n\n/* eslint-disable import/no-commonjs */\nconst createHistory = process.env.TARGET === \"web\" ?\n  require(\"history/createBrowserHistory\").default :\n  require(\"history/createMemoryHistory\").default\n\nexport function createReduxRouter(routes, path = null, config = {}) {\n  // match initial route to express path\n  const history = path ? createHistory({\n    initialEntries: [ path ]\n  }) : createHistory()\n\n  return connectRoutes(history, routes)\n}\n","/**\n * Asynchrnously loads the given import and returns a Promise.\n *\n * Acts on transpiled `import()` statements from\n * [babel-plugin-universal-import](https://www.npmjs.com/package/babel-plugin-universal-import).\n *\n * @param {Object} wrapped The return value from transpiled `import()` statements.\n * @returns {Promise} Promise which resolves with the default import of imported file (asynchronous, lazy loaded).\n */\nexport function loadImport(wrapped) {\n  return wrapped.then((module) => {\n    return module && module.__esModule ? module.default : module\n  })\n}\n\n/**\n * Pre-loads the module directly on the client without direct usage.\n *\n * Acts on transpiled `import()` statements from\n * [babel-plugin-universal-import](https://www.npmjs.com/package/babel-plugin-universal-import).\n *\n * @param {Object} wrapped The return value from transpiled `import()` statements.\n * @returns {Promise} Returns the promise for notification when preloading is ready.\n */\nexport function preloadImport(wrapped) {\n  return wrapped.load()\n}\n","/* global __webpack_require__ */\nimport { CHUNK_NAMES } from \"react-universal-component\"\n\n/**\n * Synchronously loads the given module on the server.\n *\n * Acts on transpiled `import()` statements from\n * [babel-plugin-universal-import](https://www.npmjs.com/package/babel-plugin-universal-import).\n *\n * @param {Object} wrapped The return value from transpiled `import()` statements.\n * @returns {any} The default export of the imported file (synchronously loaded).\n */\nexport function loadImport(wrapped) {\n  const module = __webpack_require__(wrapped.resolve())\n  return module && module.__esModule ? module.default : module\n}\n\n/**\n * Register the module for being pre-loaded on the *client*. This has no\n * effect on the server other than injecting the chunk name for flusing to\n * the generated HTML.\n *\n * Acts on transpiled `import()` statements from\n * [babel-plugin-universal-import](https://www.npmjs.com/package/babel-plugin-universal-import).\n *\n * @param {Object} wrapped The return value from transpiled `import()` statements.\n */\nexport function preloadImport(wrapped) {\n  CHUNK_NAMES.add(wrapped.chunkName())\n}\n","import areIntlLocalesSupported from \"intl-locales-supported\"\nimport { addLocaleData } from \"react-intl\"\n\nimport {\n  loadImport as loadImportClient\n} from \"../client/loadImport\"\n\nimport {\n  loadImport as loadImportServer,\n  preloadImport as preloadImportServer\n} from \"../server/loadImport\"\n\n\n\nconst PREFER_NATIVE = true\n\nvar intlSupportTable\nif (process.env.TARGET === \"node\") {\n  intlSupportTable = require(\"caniuse-lite\").feature(\n    require(\"caniuse-lite/data/features/internationalization.js\")\n  )\n}\n\nexport function requiresIntlPolyfill(locale) {\n  // Determine if the built-in `Intl` has the locale data we need.\n  if (PREFER_NATIVE && global.Intl && areIntlLocalesSupported([ locale ])) {\n    return false\n  }\n\n  // By default Node only ships with basic English locale data. You can however build a\n  // Node binary with all locale data. We recommend doing this if you control the container\n  // your Node app runs in, otherwise you'll want to polyfill Intl in Node.\n  // Via: https://github.com/yahoo/react-intl/wiki#i18n-in-javascript\n  if (PREFER_NATIVE === false && process.env.TARGET === \"node\")\n  {\n    /* eslint-disable no-console */\n    console.warn(\"Your NodeJS installation does not include full ICU locale data! Fallback to polyfill!\")\n    console.warn(\"See also: https://github.com/nodejs/node/wiki/Intl\")\n  }\n\n  return true\n}\n\nexport function installIntlPolyfill() {\n  const Polyfill = global.IntlPolyfill\n  if (!Polyfill) {\n    console.log(\"Can't find IntlPolyfill global!\")\n    return\n  }\n\n  // `Intl` exists, but it doesn't have the data we need, so load the\n  // polyfill and patch the constructors we need with the polyfill's.\n  if (global.Intl) {\n    Intl.NumberFormat = Polyfill.NumberFormat\n    Intl.DateTimeFormat = Polyfill.DateTimeFormat\n  } else {\n    global.Intl = Polyfill\n  }\n}\n\nexport function requiresReactIntl() {\n  // Locale Data in Node.js:\n  // When using React Intl in Node.js (same for the Intl.js polyfill), all locale data will be\n  // loaded into memory. This makes it easier to write a universal/isomorphic React app with\n  // React Intl since you won't have to worry about dynamically loading locale data on the server.\n  // Via: https://github.com/yahoo/react-intl/wiki#locale-data-in-nodejs\n\n  // As mentioned above no additional data has to be loaded for NodeJS. We are just resolving\n  // the Promise in that case.\n  if (process.env.TARGET === \"node\") {\n    return false\n  }\n\n  return true\n}\n\nexport function installReactIntl(response) {\n  if (process.env.TARGET !== \"node\") {\n    addLocaleData(response)\n  }\n}\n\n\n/**\n * Selector for quering the current locale e.g. de-DE, en-US, ...\n */\nexport function getLocale(state) {\n  return state.edge.intl.locale\n}\n\n\n/**\n * Selector for quering the current language e.g. de, en, fr, es, ...\n */\nexport function getLanguage(state) {\n  return state.edge.intl.language\n}\n\n\n/**\n * Selector for quering the current region e.g. DE, BR, PT, ...\n */\nexport function getRegion(state) {\n  return state.edge.intl.region\n}\n\n\n// Note:\n// As long as Rollup does not support dynamic `import()` we unfortunately have to implement\n// the loading part of intl files and general all code splitting in the real application\n// and not in any shared library. There is currently a way to transpile `import()` to\n// `require.ensure()` which does 50% of the equation - and is supported by *prepublish* but the\n// remaining part to define code splitting via `webpackChunkName` is not solvable right now.\n\nexport function ensureReactIntlSupport(importWrapper, intl) {\n  // React-Intl always loads monolithically with all locales in NodeJS\n  if (process.env.TARGET === \"node\") {\n    return preloadImportServer(importWrapper)\n  } else {\n    return loadImportClient(importWrapper).then(installReactIntl)\n  }\n}\n\n/* eslint-disable max-params */\nexport function ensureIntlSupport(importWrapper, intl, browser) {\n  const hasIntlSupport = global.Intl && areIntlLocalesSupported([ intl.locale ])\n\n  if (process.env.TARGET === \"node\") {\n    if (!hasIntlSupport) {\n      loadImportServer(importWrapper)\n    }\n\n    let clientHasIntl = false\n    try {\n      // TODO: Make this smarter and more error tolerant\n      if (intlSupportTable.stats[browser.family.toLowerCase()][browser.major] === \"y\") {\n        clientHasIntl = true\n      }\n    } catch (error) {\n      console.log(\"Error during querying support table:\", error)\n      // pass\n    }\n\n    if (!clientHasIntl) {\n      preloadImportServer(importWrapper)\n    }\n  } else if (!hasIntlSupport) {\n    return loadImportClient(importWrapper).then(installIntlPolyfill)\n  }\n\n  return null\n}\n","import React from \"react\"\n\nimport { Provider } from \"react-redux\"\nimport { ApolloProvider } from \"react-apollo\"\nimport { IntlProvider } from \"react-intl\"\n\n/**\n * Wraps the application class with different providers for offering the\n * following features:\n *\n * - Apollo GraphQL\n * - Redux\n * - React Intl\n *\n * This might be extended with new features during development.\n *\n * @param {React.Component} Application The React root application component.\n * @param {Kernel} kernel Kernel instance which holds the data oriented runtime state.\n * @returns {React.Component} Returns the wrapped application component.\n */\nexport default function wrapApplication(Application, kernel) {\n  let Wrapped = Application\n\n  if (kernel.apollo) {\n    Wrapped = (\n      <ApolloProvider client={kernel.apollo} store={kernel.store}>\n        {Wrapped}\n      </ApolloProvider>\n    )\n  }\n\n  if (kernel.store) {\n    Wrapped = (\n      <Provider store={kernel.store}>\n        {Wrapped}\n      </Provider>\n    )\n  }\n\n  if (kernel.intl) {\n    Wrapped = (\n      <IntlProvider locale={kernel.intl.locale}>\n        {Wrapped}\n      </IntlProvider>\n    )\n  }\n\n  return Wrapped\n}\n","import reactTreeWalker from \"react-tree-walker\"\n\n/* eslint-disable no-shadow */\n/* eslint-disable max-params */\nexport default function deepFetch(rootElement)\n{\n  function visitor(element, instance, context) {\n    if (instance && typeof instance.fetchData === \"function\") {\n      return instance.fetchData()\n    }\n\n    return true\n  }\n\n  return reactTreeWalker(rootElement, visitor)\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { connect } from \"react-redux\"\n\n/**\n * Wraps the given component to make it only visible when the current\n * navigation matches the redux router type.\n *\n * @param {Component} ChildComponent Component to wrap.\n * @param {string} type Redux-Route Type to match for make visible.\n */\nexport default function routed(ChildComponent, type) {\n  function RouteTarget({ currentLocation, currentPayload }) {\n    if (type === currentLocation) {\n      return (\n        <ChildComponent {...currentPayload}/>\n      )\n    }\n\n    return null\n  }\n\n  RouteTarget.propTypes = {\n    type: PropTypes.string,\n    currentLocation: PropTypes.string,\n    currentPayload: PropTypes.object\n  }\n\n  function mapStateToProps(state, ownProps) {\n    return {\n      currentLocation: state.location.type,\n      currentPayload: state.location.payload\n    }\n  }\n\n  return connect(mapStateToProps)(RouteTarget)\n}\n","/**\n * Returns the browser locale settings based on available locales and browser settings.\n *\n * @param {Array} supportedLocales List of supported locales by the application.\n */\nexport default function getBrowserLocale(supportedLocales) {\n  return process.env.TARGET === \"web\" ? _getBrowserLocale(supportedLocales) : null\n}\n\nfunction _getBrowserLocale(supportedLocales) {\n  const supported = new Set(supportedLocales)\n  const available = new Set()\n\n  // Modern standard: Support by modern Chrome, Safari and Firefox\n  const languages = navigator.languages\n  if (languages) {\n    for (let lang of languages) {\n      if (supported.has(lang)) {\n        available.add(lang)\n      }\n    }\n  }\n\n  // Microsoft standard\n  const userLanguage = navigator.userLanguage\n  if (userLanguage) {\n    const wellFormedUserLanguage = (() => {\n      const splitted = userLanguage.split(\"-\")\n      return `${splitted[0]}-${splitted[1].toUpperCase()}`\n    })()\n\n    if (supported.has(wellFormedUserLanguage)) {\n      available.add(wellFormedUserLanguage)\n    }\n  }\n\n  // Legacy API\n  const language = navigator.language\n  if (language && supported.has(language)) {\n    available.add(language)\n  }\n\n  // Return only the first match\n  const first = Array.from(available.values())[0]\n  return first ? {\n    locale: first,\n    language: first.split(\"-\")[0],\n    region: first.split(\"-\")[1] || first.split(\"-\")[0].toUpperCase()\n  } : null\n}\n","import { createReduxRouter } from \"./ReduxRouter\"\nimport { createApolloClient } from \"./ApolloClient\"\nimport { createReduxStore } from \"./State\"\nimport getBrowserLocale from \"../client/getBrowserLocale\"\n\nconst defaultState = process.env.TARGET === \"web\" ? window.APP_STATE : null\n\n/**\n *\n * @param {*} State\n * @param {*} param1\n */\nexport default function createKernel(State, { state = defaultState, edge, request } = {}) {\n  // Use given edge instance when not already defined on state\n  if (process.env.TARGET === \"node\" && edge != null) {\n    if (!state.edge) {\n      state.edge = edge\n    }\n  }\n\n  if (process.env.TARGET === \"web\" && state.edge.intl == null) {\n    console.warn(\"Fallback to client side locale information!\")\n\n    // FIXME: Retrieve data from build config\n    const supportedLocales = []\n    state.edge.intl = getBrowserLocale(supportedLocales)\n  }\n\n  let router = createReduxRouter(\n    State.getRoutes(),\n    request ? request.path : null\n  )\n\n  const apolloClientConfig =\n    State.getApolloClientConfig && State.getApolloClientConfig() ?\n      State.getApolloClientConfig() :\n      { uri: null }\n\n  let apollo = createApolloClient(apolloClientConfig)\n\n  let store = createReduxStore({\n    reducers: State.getReducers(),\n    enhancers: State.getEnhancers(),\n    middlewares: State.getMiddlewares(),\n    state,\n    router,\n    apollo\n  })\n\n  let intl = state.edge.intl\n\n  // Kernel \"Instance\"\n  return {\n    intl,\n    router,\n    apollo,\n    store\n  }\n}\n","import deepFetch from \"./deepFetch\"\n\nexport default async function fetchData(WrappedApplication, kernel) {\n  // Asynchronous magic... loading required application data\n  // Supports parallel loading of either Apollo-style (aka fetchData())\n  // and Redux-First-Router aka thunks attached to paths\n  const start = new Date()\n  console.log(\"[EDGE] Fetching data...\")\n  const result = await Promise.all([\n    kernel.router.thunk(kernel.store),\n    deepFetch(WrappedApplication)\n  ])\n\n  console.log(`[EDGE] Done in ${new Date() - start}ms`)\n  return result\n}\n","import React from \"react\"\nimport { render } from \"react-dom\"\n\nimport wrapApplication from \"../common/wrapApplication\"\n\nexport default function renderApp(Application, kernel) {\n  console.log(\"[EDGE]: Rendering application...\")\n  render(wrapApplication(<Application />, kernel), document.getElementById(\"root\"))\n}\n","import { createRootReducer } from \"../common/State\"\n\nexport default function updateState(NextState, kernel) {\n  console.log(\"[EDGE]: Updating application state...\")\n  kernel.store.replaceReducer(createRootReducer(\n    NextState.getReducers(),\n    kernel.router,\n    kernel.apollo\n  ))\n}\n","// This file is just for exporting infrastructure to applications built upon this.\n\n// Polyfill for fetch() API\n// https://github.com/developit/unfetch\nimport \"unfetch/polyfill\"\n\nexport * from \"./common\"\nexport * from \"./client/loadImport\"\n\nexport { default as getBrowserLocale } from \"./client/getBrowserLocale\"\nexport { default as renderApp } from \"./client/renderApp\"\nexport { default as updateState } from \"./client/updateState\"\n"],"names":["composeEnhancers","process","env","NODE_ENV","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","emptyReducer","previousState","emptyMiddleware","next","action","emptyEnhancer","param","edgeReducer","createRootReducer","reducers","router","apollo","allReducers","location","reducer","combineReducers","createReduxStore","config","rootReducer","rootEnhancers","applyMiddleware","middleware","require","middlewares","createLogger","collapsed","enhancer","enhancers","store","createStore","state","createApolloClient","ssrMode","client","uri","opts","trustNetwork","networkInterface","batchRequests","createBatchingNetworkInterface","createNetworkInterface","ApolloClient","createHistory","createReduxRouter","routes","path","history","connectRoutes","loadImport","wrapped","then","module","__esModule","preloadImport","load","PREFER_NATIVE","requiresIntlPolyfill","locale","global","Intl","areIntlLocalesSupported","installIntlPolyfill","Polyfill","IntlPolyfill","log","NumberFormat","DateTimeFormat","requiresReactIntl","installReactIntl","response","getLocale","edge","intl","getLanguage","language","getRegion","region","ensureReactIntlSupport","importWrapper","loadImportClient","ensureIntlSupport","hasIntlSupport","wrapApplication","Application","kernel","Wrapped","deepFetch","rootElement","reactTreeWalker","element","instance","fetchData","routed","ChildComponent","type","connect","payload","currentLocation","currentPayload","getBrowserLocale","supportedLocales","_getBrowserLocale","supported","Set","available","languages","navigator","lang","has","add","userLanguage","wellFormedUserLanguage","splitted","split","toUpperCase","first","Array","from","values","defaultState","APP_STATE","createKernel","State","request","warn","getRoutes","apolloClientConfig","getApolloClientConfig","getReducers","getEnhancers","getMiddlewares","WrappedApplication","Date","Promise","all","thunk","start","result","renderApp","document","getElementById","updateState","NextState","replaceReducer"],"mappings":";;;;;;;;;;;;;;;;AAGA,MAAMA,mBAAoB,UAAuB,KAAvB,IACxBC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,aADD,IAEtBC,OAAOC,oCAFc,IAE2BC,OAFpD;;;;;;;;AAUA,AAAO,SAASC,YAAT,CAAsBC,gBAAgB,EAAtC,EAAkD;SAChDA,aAAP;;;;;;;;AASF,AAAO,SAASC,eAAT,GAAgC;SAC7BC,IAAD,IAAU;WACPC,MAAD,IAAY;aACVD,KAAKC,MAAL,CAAP;KADF;GADF;;;;;;AAWF,AAAO,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;SAC5BA,KAAP;;;;;;;AAQF,AAAO,SAASC,WAAT,CAAqBN,gBAAgB,EAArC,EAAiD;SAC/CA,aAAP;;;;;;AASF;;;;;AAQA,AAAO,SAASO,iBAAT,CAA2BC,QAA3B,EAAqCC,SAAS,IAA9C,EAAoDC,SAAS,IAA7D,EAAmE;QAClEC,gCAEDH,QAFC;;;UAKEF;;;IALR,CASA,IAAIG,MAAJ,EAAY;gBACEG,QAAZ,GAAuBH,OAAOI,OAA9B;;;;MAIEH,MAAJ,EAAY;gBACEA,MAAZ,GAAqBA,OAAOG,OAAP,EAArB;;;SAGKC,gBAAgBH,WAAhB,CAAP;;;;;;;AAQF,AAAO,SAASI,gBAAT,CAA0BC,SAAS,EAAnC,EAAuC;QACtC;eACO,EADP;kBAEU,EAFV;gBAGQ,EAHR;YAII,EAJJ;aAKK,IALL;aAMK;MACPA,MAPJ;;QASMC,cAAcV,kBAAkBC,QAAlB,EAA4BC,MAA5B,EAAoCC,MAApC,CAApB;;QAEMQ,gBAAgB1B,iBACpB2B,gBACET,SAASA,OAAOU,UAAP,EAAT,GAA+BnB,eADjC;;;;;UAMUP,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,GACE0B,QAAQ,iCAAR,cADF,GACyDpB,eAP3D;;;OAAA;;;WAaWQ,OAAOW,UAAhB,GAA6BnB,eAb/B;;;KAgBKqB,WAhBL;;;;;UAsBY,cAAR,EAAwBC,YAAxB,CAAqC,EAAEC,WAAW,IAAb,EAArC,CAtBJ,CADoB;;;WA2BXf,OAAOgB,QAAhB,GAA2BrB,aA3BP;;;KA8BjBsB,SA9BiB,CAAtB;;QAiCMC,QAAQC,YACZX,WADY,EAEZY,KAFY,EAGZX,aAHY,CAAd;;SAMOS,KAAP;;;AC1IK,SAASG,kBAAT,CAA4Bd,SAAS,EAArC,EAAyC;QACxC;WAAA;UAEE,IAFF;oBAGY,KAHZ;mBAIW,IAJX;yBAKiB;MACnBA,MANJ;;QASMe,UAAU,UAAuB,MAAvC;MACIC,MAAJ;;MAFkBC,OAAO,IAIzB,EAAe;QACTC,OAAO;mBACIC,eAAe,SAAf,GAA2B,aAD/B;;;;;KAAX;;QAQIC,gBAAJ;;QAEIC,aAAJ,EAAmB;yBACEC,+BAA+B;WAAA;uBAEjC,EAFiC;;OAA/B,CAAnB;KADF,MAMO;yBACcC,uBAAuB;WAAA;;OAAvB,CAAnB;;;aAMO,IAAIC,YAAJ,CAAiB;aAAA;wBAAA;;KAAjB,CAAT;GAxBF,MA6BO;aACI,IAAIA,YAAJ,CAAiB;aAAA;;KAAjB,CAAT;;;SAMKR,MAAP;;;ACjDF;AACA,MAAMS,gBACJpB,QAAQ,8BAAR,YADF;;AAIA,AAAO,SAASqB,iBAAT,CAA2BC,MAA3B,EAAmCC,OAAO,IAA1C,EAAgD5B,SAAS,EAAzD,EAA6D;;QAE5D6B,UAAUD,OAAOH,cAAc;oBACnB,CAAEG,IAAF;GADK,CAAP,GAEXH,eAFL;;SAIOK,cAAcD,OAAd,EAAuBF,MAAvB,CAAP;;;ACbF;;;;;;;;;AASA,AAAO,SAASI,UAAT,CAAoBC,OAApB,EAA6B;SAC3BA,QAAQC,IAAR,CAAcC,MAAD,IAAY;WACvBA,UAAUA,OAAOC,UAAjB,GAA8BD,iBAA9B,GAA+CA,MAAtD;GADK,CAAP;;;;;;;;;;;;AAcF,AAAO,SAASE,aAAT,CAAuBJ,OAAvB,EAAgC;SAC9BA,QAAQK,IAAR,EAAP;;;ACzBF;AACA,AAEA;;;;;;;;;AASA;;;;;;;;;;;;;ACEA,MAAMC,gBAAgB,IAAtB;;AAEA,AAOO,SAASC,oBAAT,CAA8BC,MAA9B,EAAsC;;MAEvCF,iBAAiBG,OAAOC,IAAxB,IAAgCC,wBAAwB,CAAEH,MAAF,CAAxB,CAApC,EAAyE;WAChE,KAAP;;;;;;;;;SAcK,IAAP;;;AAGF,AAAO,SAASI,mBAAT,GAA+B;QAC9BC,WAAWJ,OAAOK,YAAxB;MACI,CAACD,QAAL,EAAe;YACLE,GAAR,CAAY,iCAAZ;;;;;;MAMEN,OAAOC,IAAX,EAAiB;SACVM,YAAL,GAAoBH,SAASG,YAA7B;SACKC,cAAL,GAAsBJ,SAASI,cAA/B;GAFF,MAGO;WACEP,IAAP,GAAcG,QAAd;;;;AAIJ,AAAO,SAASK,iBAAT,GAA6B;;SAa3B,IAAP;;;AAGF,AAAO,SAASC,gBAAT,CAA0BC,QAA1B,EAAoC;gBAEzBA,QAAd;;;;;;AAQJ,AAAO,SAASC,SAAT,CAAmBxC,KAAnB,EAA0B;SACxBA,MAAMyC,IAAN,CAAWC,IAAX,CAAgBf,MAAvB;;;;;;AAOF,AAAO,SAASgB,WAAT,CAAqB3C,KAArB,EAA4B;SAC1BA,MAAMyC,IAAN,CAAWC,IAAX,CAAgBE,QAAvB;;;;;;AAOF,AAAO,SAASC,SAAT,CAAmB7C,KAAnB,EAA0B;SACxBA,MAAMyC,IAAN,CAAWC,IAAX,CAAgBI,MAAvB;;;;;;;;;;AAWF,AAAO,SAASC,sBAAT,CAAgCC,aAAhC,EAAqD;;SAKjDC,WAAiBD,aAAjB,EAAgC5B,IAAhC,CAAqCkB,gBAArC,CAAP;;;;AAKJ,AAAO,SAASY,iBAAT,CAA2BF,aAA3B,EAA0CN,IAA1C,EAAyD;QACxDS,iBAAiBvB,OAAOC,IAAP,IAAeC,wBAAwB,CAAEY,KAAKf,MAAP,CAAxB,CAAtC;;MAqBW,CAACwB,cAAL,EAAqB;WACnBF,WAAiBD,aAAjB,EAAgC5B,IAAhC,CAAqCW,mBAArC,CAAP;;;SAGK,IAAP;;;AChJF;;;;;;;;;;;;;;AAcA,AAAe,SAASqB,eAAT,CAAyBC,WAAzB,EAAsCC,MAAtC,EAA8C;MACvDC,UAAUF,WAAd;;MAEIC,OAAOzE,MAAX,EAAmB;mBAEd,cADH;cAC0ByE,OAAOzE,MADjC;aACgDyE,OAAOxD;eAClDyD,OAFL;;;MAOED,OAAOxD,KAAX,EAAkB;mBAEb,QADH;aACmBwD,OAAOxD;eACrByD,OAFL;;;MAOED,OAAOZ,IAAX,EAAiB;mBAEZ,YADH;cACwBY,OAAOZ,IAAP,CAAYf;eAC/B4B,OAFL;;;SAOKA,OAAP;;;AC7CF;;AAEA,AAAe,SAASC,SAAT,CAAmBC,WAAnB,EACf;;SASSC,gBAAgBD,WAAhB,EARP,UAAiBE,OAAjB,EAA0BC,QAA1B,EAA6C;QACvCA,YAAY,OAAOA,SAASC,SAAhB,KAA8B,UAA9C,EAA0D;aACjDD,SAASC,SAAT,EAAP;;;WAGK,IAAP;GAGK,CAAP;;;ACVF;;;;;;;AAOA,AAAe,SAASC,MAAT,CAAgBC,cAAhB,EAAgCC,IAAhC,EAAsC;;SAwB5CC,QAPP,UAAyBjE,KAAzB,EAA0C;WACjC;uBACYA,MAAMjB,QAAN,CAAeiF,IAD3B;sBAEWhE,MAAMjB,QAAN,CAAemF;KAFjC;GAMK,EAvBP,UAAqB,EAAEC,eAAF,EAAmBC,cAAnB,EAArB,EAA0D;QACpDJ,SAASG,eAAb,EAA8B;aAE1B,oBAAC,cAAD,EAAoBC,cAApB,CADF;;;WAKK,IAAP;GAgBK,CAAP;;;ACnCF;;;;;AAKA,AAAe,SAASC,gBAAT,CAA0BC,gBAA1B,EAA4C;SACnBC,kBAAkBD,gBAAlB,CAAtC;;;AAGF,SAASC,iBAAT,CAA2BD,gBAA3B,EAA6C;QACrCE,YAAY,IAAIC,GAAJ,CAAQH,gBAAR,CAAlB;QACMI,YAAY,IAAID,GAAJ,EAAlB;;;QAGME,YAAYC,UAAUD,SAA5B;MACIA,SAAJ,EAAe;SACR,IAAIE,IAAT,IAAiBF,SAAjB,EAA4B;UACtBH,UAAUM,GAAV,CAAcD,IAAd,CAAJ,EAAyB;kBACbE,GAAV,CAAcF,IAAd;;;;;;QAMAG,eAAeJ,UAAUI,YAA/B;MACIA,YAAJ,EAAkB;UACVC,yBAAyB,CAAC,MAAM;YAC9BC,WAAWF,aAAaG,KAAb,CAAmB,GAAnB,CAAjB;aACQ,GAAED,SAAS,CAAT,CAAY,IAAGA,SAAS,CAAT,EAAYE,WAAZ,EAA0B,EAAnD;KAF6B,GAA/B;;QAKIZ,UAAUM,GAAV,CAAcG,sBAAd,CAAJ,EAA2C;gBAC/BF,GAAV,CAAcE,sBAAd;;;;;QAKErC,WAAWgC,UAAUhC,QAA3B;MACIA,YAAY4B,UAAUM,GAAV,CAAclC,QAAd,CAAhB,EAAyC;cAC7BmC,GAAV,CAAcnC,QAAd;;;;QAIIyC,QAAQC,MAAMC,IAAN,CAAWb,UAAUc,MAAV,EAAX,EAA+B,CAA/B,CAAd;SACOH,QAAQ;YACLA,KADK;cAEHA,MAAMF,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAFG;YAGLE,MAAMF,KAAN,CAAY,GAAZ,EAAiB,CAAjB,KAAuBE,MAAMF,KAAN,CAAY,GAAZ,EAAiB,CAAjB,EAAoBC,WAApB;GAH1B,GAIH,IAJJ;;;ACvCF,MAAMK,eAA8C1H,OAAO2H,SAA3D;;;;;;;AAOA,AAAe,SAASC,YAAT,CAAsBC,KAAtB,EAA6B,EAAE5F,QAAQyF,YAAV,EAAwBhD,IAAxB,EAA8BoD,OAA9B,KAA0C,EAAvE,EAA2E;;MAQpF,UAAuB,KAAvB,IAAgC7F,MAAMyC,IAAN,CAAWC,IAAX,IAAmB,IAAvD,EAA6D;YACnDoD,IAAR,CAAa,6CAAb;;;;UAIMrD,IAAN,CAAWC,IAAX,GAAkB2B,iBADO,EACP,CAAlB;;;MAGEzF,SAASiC,kBACX+E,MAAMG,SAAN,EADW,EAEXF,UAAUA,QAAQ9E,IAAlB,GAAyB,IAFd,CAAb;;QAKMiF,qBACJJ,MAAMK,qBAAN,IAA+BL,MAAMK,qBAAN,EAA/B,GACEL,MAAMK,qBAAN,EADF,GAEE,EAAE7F,KAAK,IAAP,EAHJ;;MAKIvB,SAASoB,mBAAmB+F,kBAAnB,CAAb;;MAEIlG,QAAQZ,iBAAiB;cACjB0G,MAAMM,WAAN,EADiB;eAEhBN,MAAMO,YAAN,EAFgB;iBAGdP,MAAMQ,cAAN,EAHc;SAAA;UAAA;;GAAjB,CAAZ;;MASI1D,OAAO1C,MAAMyC,IAAN,CAAWC,IAAtB;;;SAGO;QAAA;UAAA;UAAA;;GAAP;;;AClDF,iBAAe,UAAyB2D,kBAAzB,EAA6C/C,MAA7C;;;SAAA,GAIC,IAAIgD,IAAJ,EAJD;;YAKLpE,GAAR,CAAY,yBAAZ;WACqBqE,QAAQC,GAAR,CAAY,CAC/BlD,OAAO1E,MAAP,CAAc6H,KAAd,CAAoBnD,OAAOxD,KAA3B,CAD+B,EAE/B0D,UAAU6C,kBAAV,CAF+B,CAAZ,CAAN;YAAA;;;cAKPnE,GAAR,CAAa,kBAAiB,IAAIoE,IAAJ,KAAaI,KAAM,IAAjD;qBACOC,MAAP;;;CAZF;;ACGe,SAASC,SAAT,CAAmBvD,WAAnB,EAAgCC,MAAhC,EAAwC;UAC7CpB,GAAR,CAAY,kCAAZ;SACOkB,qBAAiB,WAAjB,OAAiCE,MAAjC,CAAP,EAAiDuD,SAASC,cAAT,CAAwB,MAAxB,CAAjD;;;ACLa,SAASC,WAAT,CAAqBC,SAArB,EAAgC1D,MAAhC,EAAwC;UAC7CpB,GAAR,CAAY,uCAAZ;SACOpC,KAAP,CAAamH,cAAb,CAA4BvI,kBAC1BsI,UAAUd,WAAV,EAD0B,EAE1B5C,OAAO1E,MAFmB,EAG1B0E,OAAOzE,MAHmB,CAA5B;;;ACJF;;;;;;;"}